/**
 * Copied from https://github.com/cyverse/troposphere/pull/514.
 */

const hasClipboardAPI = () => {
    let result = false;

    try {
        result = document.queryCommandSupported &&
                 document.queryCommandSupported('copy');
    } catch (e) { }

    return result;
};

/**
 * Safely copies the contents of an `element` that has been selected to the clipboard.
 */
const copySelection = () => {
    let copied = false;

    if (hasClipboardAPI()) {
        try {
            copied = document.execCommand('copy');
        } catch (e) { }
    }

    return copied;
};

/**
 * Safely copies the contents of `element` argument to the clipboard.
 *
 * Uses approach seen in clipboard.js and copy-to-clipboard. Not all
 * elements will have a `select()` method, so it uses the range &
 * selection objects from `document` to achieve the text copy.
 *
 * @param element - DOM node to copy
 */
const copyElement = (element) => {
    let copied = false;

    if (hasClipboardAPI()) {
        let range = document.createRange(),
            selection = document.getSelection();

        // done for "none" text area or text field elements
        range.selectNode(element);

        // avoid potential 'Discontiguous selection is not supported'
        // error that is generated by an existing selection followed
        // by the "addRange" call below
        selection.removeAllRanges();
        selection.addRange(range);

        copied = copySelection();

        // clean up selections ...
        selection.removeAllRanges();
    }

    return copied;
};

export { copyElement, copySelection, hasClipboardAPI };
